// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `headers/example.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int native_add(
    int x,
    int y,
  ) {
    return _native_add(
      x,
      y,
    );
  }

  late final _native_addPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'native_add');
  late final _native_add = _native_addPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<Coordinate> create_coordinate(
    double latitude,
    double longitude,
  ) {
    return _create_coordinate(
      latitude,
      longitude,
    );
  }

  late final _create_coordinatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Coordinate> Function(
              ffi.Double, ffi.Double)>>('create_coordinate');
  late final _create_coordinate = _create_coordinatePtr
      .asFunction<ffi.Pointer<Coordinate> Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _Test = _lookup<ffi.Int>('Test');

  int get Test => _Test.value;

  set Test(int value) => _Test.value = value;

  int getText(
    int para,
  ) {
    return _getText(
      para,
    );
  }

  late final _getTextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getText');
  late final _getText = _getTextPtr.asFunction<int Function(int)>();

  int ffi_Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ffi_Dart_InitializeApiDL(
      data,
    );
  }

  late final _ffi_Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_Dart_InitializeApiDL');
  late final _ffi_Dart_InitializeApiDL = _ffi_Dart_InitializeApiDLPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int native_add_callback(
    int x,
    int y,
    callback call,
  ) {
    return _native_add_callback(
      x,
      y,
      call,
    );
  }

  late final _native_add_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, callback)>>(
          'native_add_callback');
  late final _native_add_callback =
      _native_add_callbackPtr.asFunction<int Function(int, int, callback)>();
}

class Coordinate extends ffi.Struct {
  @ffi.Double()
  external double latitude;

  @ffi.Double()
  external double longitude;
}

typedef callback = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>;
